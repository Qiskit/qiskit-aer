# Copyright 2018, IBM.
#
# This source code is licensed under the Apache License, Version 2.0 found in
# the LICENSE.txt file in the root directory of this source tree.

notifications:
  email: false

cache:
  pip: true
  directories:
    - .stestr
sudo: false

###############################################################################
# Anchored and aliased definitions.
###############################################################################

# These are used for avoiding repeating code, and due to problems with
# overriding some keys (in particular, "os" and "language: ptyhon") when using
# the standard travis matrix with stages.
#
# This allows re-using different "sets" of configurations in the stages
# matrix, mimicking a hierarchy:
# * stage_generic
#   * stage_linux
#   * stage_osx
stage_generic: &stage_generic
  install:
    - pip install -U 'pip<20.0.0'
    - pip install cython
    # Install terra from master on aer master else use the most recent release
    - |
      if [[ $TRAVIS_BRANCH == "master" ]] ; then
          pip install -c constraints.txt https://github.com/Qiskit/qiskit-terra/archive/master.zip
      else
          pip install -U -c constraints.txt qiskit-terra
      fi
    # Installing qiskit-ibmq-provider stable branch
    # This is only needed to suppress warnings when importing Qiskit
    - pip install https://github.com/Qiskit/qiskit-ibmq-provider/archive/stable.zip
    # Installing qiskit-aer...
    - pip install -U -c constraints.txt -r requirements-dev.txt

stage_linux: &stage_linux
  <<: *stage_generic
  os: linux
  dist: bionic
  language: python
  python: 3.7
  sudo: true
  before_install:
    - sudo apt-get -y update
    - sudo apt-get -y install g++-7
  before_script:
    - |
      if [ ! "$(ls -A .stestr)" ]; then
        rm -rf .stestr
      fi
    # Build with Thrust OpenMP CPU backend
    - python setup.py bdist_wheel -- -DCMAKE_CXX_COMPILER=g++-7 -DAER_THRUST_BACKEND=OMP -- -j4
    - pip install dist/qiskit_aer*whl
  script:
    - pip check
    - stestr run --slowest

stage_osx: &stage_osx
  <<: *stage_generic
  os: osx
  osx_image: xcode9.4
  language: generic
  python: 3.7
  env:
        - MPLBACKEND=ps
        - PYTHON_VERSION=3.7.2
  cache:
    pip: true
    directories:
      - ~/python-interpreters/
      - .stestr
  before_install:
    # Travis does not provide support for Python 3 under osx - it needs to be
    # installed manually.
    - |
      if [ ${TRAVIS_OS_NAME} = "osx" ]; then
        if [[ ! -d ~/python-interpreters/$PYTHON_VERSION ]]; then
          git clone git://github.com/pyenv/pyenv.git
          cd pyenv/plugins/python-build
          ./install.sh
          cd ../../..
          python-build $PYTHON_VERSION ~/python-interpreters/$PYTHON_VERSION
        fi
        sudo pip2 install -U virtualenv pip setuptools
        virtualenv --python ~/python-interpreters/$PYTHON_VERSION/bin/python venv
        source venv/bin/activate
      fi
  before_script:
    # Build with Thrust OpenMP CPU backend
    - python setup.py bdist_wheel -- -DAER_THRUST_BACKEND=OMP -- -j4
    - pip install dist/qiskit_aer*whl
  script:
    - python setup.py bdist_wheel -- -- -j4
    - pip install dist/qiskit_aer*whl
  script:
    - pip check
    - stestr run --slowest

###############################################################################
# Stage-related definitions
###############################################################################

# Define the order of the stages.
stages:
  - name: deploy
    if: tag IS present
  - name: lint
    if: tag IS blank
  - name: compile
    if: tag IS blank
  - name: test
    if: tag IS blank

# Define the job matrix explicitly, as matrix expansion causes issues when
# using it with stages and some variables/sections cannot be overridden.
jobs:
  include:
    # "lint" stage
    ###########################################################################
    # C++ and Python linters
    # TODO: C++ clang-tidy!
    - stage: lint
      name: Python Style and Linter
      <<: *stage_linux
      before_script: true
      script:
        - pycodestyle --ignore=E402,W504 --max-line-length=100 qiskit/providers/aer
        - pylint -j 2 -rn qiskit/providers/aer

    # "compile" stage
    ###########################################################################
    # Linux Wheel
    - stage: compile
      name: Python Wheel Build Linux
      language: python
      python: 3.7
      os: linux
      services:
        - docker
      env:
        - CIBW_BEFORE_BUILD="pip install -U Cython pip virtualenv pybind11"
        - CIBW_SKIP="cp27-* cp34-* *-manylinux_i686"
        - CIBW_MANYLINUX_X86_64_IMAGE="manylinux2010"
        - CIBW_MANYLINUX_I686_IMAGE="manylinux2010"
        - CIBW_TEST_COMMAND="python3 {project}/tools/verify_wheels.py"
        - CIBW_TEST_REQUIRES="git+https://github.com/Qiskit/qiskit-terra.git"
      script:
        - pip install -U pip virtualenv twine
        - pip install cibuildwheel==1.1.0
        - cibuildwheel --output-dir wheelhouse
    - stage: compile
      name: Python sdist Build Linux
      <<: *stage_linux
      before_script:
        - pip install -U virtualenv pip setuptools
      script:
        - python setup.py sdist
        - mkdir out; cd out; virtualenv aer-test
        - aer-test/bin/pip install -c ../constraints.txt git+https://github.com/Qiskit/qiskit-terra
        - aer-test/bin/pip install ../dist/*tar.gz
        - aer-test/bin/python ../tools/verify_wheels.py
        - aer-test/bin/pip check
    # MacOS Wheel
    - stage: compile
      name: Python Wheel Build MacOS
      <<: *stage_osx
      before_script: true
      script:
        - python setup.py bdist_wheel -- -DAER_THRUST_BACKEND=OMP -- -j4
    - stage: compile
      name: Python sdist Build MacOS
      <<: *stage_osx
      before_script:
        - pip install -U virtualenv pip setuptools
      script:
        - python setup.py sdist
        - mkdir out; cd out; virtualenv aer-test
        - aer-test/bin/pip install -c ../constraints.txt git+https://github.com/Qiskit/qiskit-terra
        - aer-test/bin/pip install ../dist/*tar.gz
        - aer-test/bin/python ../tools/verify_wheels.py
        - aer-test/bin/pip check
    # Linux Standalone
    - stage: compile
      name: Standalone Build Linux
      <<: *stage_linux
      language: cpp
      install:
        - pip install conan
      before_script: true
      script:
        - mkdir out; cd out; cmake ..
        - make

    # "test" stage
    ###########################################################################

    # GNU/Linux, Python 3.8
    - stage: test
      name: Python 3.8 Tests Linux
      <<: *stage_linux
      python: 3.8

    # GNU/Linux, Python 3.7
    - stage: test
      name: Python 3.7 Tests Linux
      <<: *stage_linux
      python: 3.7

    # GNU/Linux, Python 3.6
    - stage: test
      if: type = cron
      name: Python 3.6 Tests Linux
      <<: *stage_linux
      python: 3.6

    # GNU/Linux, Python 3.5
    - stage: test
      if: type = cron
      name: Python 3.5 Tests Linux
      <<: *stage_linux
      python: 3.5

    # MacOS, Python 3.8 (via pyenv)
    - stage: test
      if: type = cron
      name: Python 3.8 Tests MacOS
      <<: *stage_osx
      python: 3.8
      env:
        - PYTHON_VERSION=3.8.1

    # MacOS, Python 3.7 (via pyenv)
    - stage: test
      name: Python 3.7 Tests MacOS
      <<: *stage_osx
      python: 3.7
      env:
        - MPLBACKEND=ps
        - PYTHON_VERSION=3.7.2

    # MacOS, Python 3.6 (via pyenv)
    - stage: test
      if: type = cron
      name: Python 3.6 Tests MacOS
      <<: *stage_osx
      python: 3.6
      env:
        - MPLBACKEND=ps
        - PYTHON_VERSION=3.6.5

    # MacOS, Python 3.5 (via pyenv)
    - stage: test
      if: type = cron
      name: Python 3.5 Tests MacOS
      <<: *stage_osx
      python: 3.5
      env:
        - MPLBACKEND=ps
        - PYTHON_VERSION=3.5.6
    # "deploy" stage
    ##########################################################################
    #
    - name: Release Linux Wheel Builds and Upload
      stage: deploy
      language: python
      python: 3.7
      os: linux
      services:
        - docker
      env:
        - CIBW_BEFORE_BUILD="pip install -U Cython pip virtualenv pybind11"
        - CIBW_SKIP="cp27-* cp34-* *-manylinux_i686"
        - CIBW_MANYLINUX_X86_64_IMAGE="manylinux2010"
        - CIBW_MANYLINUX_I686_IMAGE="manylinux2010"
        - TWINE_USERNAME=qiskit
        - CIBW_TEST_COMMAND="python3 {project}/tools/verify_wheels.py"
        - CIBW_TEST_REQUIRES="git+https://github.com/Qiskit/qiskit-terra.git"
      if: tag IS present
      script:
        - pip install -U pip virtualenv twine
        - pip install cibuildwheel==1.1.0
        - cibuildwheel --output-dir wheelhouse
        - twine upload wheelhouse/*
    - name: sdist Build and Upload
      stage: deploy
      if: tag IS present
      <<: *stage_linux
      env:
        - TWINE_USERNAME=qiskit
      python: 3.7
      before_script:
        - pip install -U pip setuptools virtualenv twine
      install: true
      script:
        - python setup.py sdist
        - twine upload dist/*
    - name: Release MacOS Wheel Builds and Upload
      os: osx
      stage: deploy
      if: tag IS present
      env:
        - CIBW_BEFORE_BUILD="pip install -U Cython pip virtualenv pybind11"
        - CIBW_SKIP="cp27-* cp34-*"
        - TWINE_USERNAME=qiskit
        - CIBW_TEST_COMMAND="python3 {project}/tools/verify_wheels.py"
        - CIBW_TEST_REQUIRES="git+https://github.com/Qiskit/qiskit-terra.git"
      script:
        - sudo pip2 install -U pip virtualenv
        - sudo pip2 install cibuildwheel==1.1.0 'twine<2.0'
        - cibuildwheel --output-dir wheelhouse
        - twine upload wheelhouse/*
  # Power tests (currently failing)
  allow_failures:
    # Power Build test
    - stage: compile
      name: Python Wheel Build Linux (Power)
      arch: ppc64le
      <<: *stage_linux
      before_script: true
      script:
        - python setup.py bdist_wheel -- -DCMAKE_CXX_COMPILER=g++-7 -DAER_THRUST_BACKEND=OMP -- -j4
    # Linux Standalone
    - stage: compile
      name: Standalone Build Linux (Power)
      arch: ppc64le
      <<: *stage_linux
      install:
        - pip install conan
      before_script: true
      script:
        - mkdir out; cd out; cmake ..
        - make
    # Power/Linux, Python 3.7
    - stage: test
      arch: ppc64le
      name: Python 3.7 Tests Linux (Power)
      <<: *stage_linux
      python: 3.7
