# Copyright 2018, IBM.
#
# This source code is licensed under the Apache License, Version 2.0 found in
# the LICENSE.txt file in the root directory of this source tree.

notifications:
  email: false

cache:
  pip: true
  directories:
    - .stestr
sudo: false

###############################################################################
# Anchored and aliased definitions.
###############################################################################

# These are used for avoiding repeating code, and due to problems with
# overriding some keys (in particular, "os" and "language: ptyhon") when using
# the standard travis matrix with stages.
#
# This allows re-using different "sets" of configurations in the stages
# matrix, mimicking a hierarchy:
# * stage_generic
#   * stage_linux
#   * stage_osx
stage_generic: &stage_generic
  install:
    - pip install -U 'pip<20.0.0'
    - pip install cython
    # Installing qiskit-terra master branch...
    - pip install https://github.com/Qiskit/qiskit-terra/archive/master.zip
    # Installing qiskit-ibmq-provider stable branch
    # This is only needed to suppress warnings when importing Qiskit
    - pip install https://github.com/Qiskit/qiskit-ibmq-provider/archive/stable.zip
    # Installing qiskit-aer...
    - pip install -U -c constraints.txt -r requirements-dev.txt

stage_linux: &stage_linux
  <<: *stage_generic
  os: linux
  dist: xenial
  language: python
  python: 3.7
  sudo: true
  before_install:
    - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
    - sudo apt-get -y update
    - sudo apt-get -y install g++-7
    - sudo apt-get -y install libopenblas-dev
  before_script:
    - |
      if [ ! "$(ls -A .stestr)" ]; then
        rm -rf .stestr
      fi
    # Build and install qiskit-aer package
    - python setup.py bdist_wheel -- -DCMAKE_CXX_COMPILER=g++-7 -- -j4
    - pip install dist/qiskit_aer*whl
  script:
    - stestr run --slowest

stage_osx: &stage_osx
  <<: *stage_generic
  os: osx
  osx_image: xcode9.2
  language: generic
  python: 3.7
  env:
        - MPLBACKEND=ps
        - PYTHON_VERSION=3.7.2
  cache:
    pip: true
    directories:
      - ~/python-interpreters/
      - .stestr
  before_install:
    # Travis does not provide support for Python 3 under osx - it needs to be
    # installed manually.
    - |
      if [ ${TRAVIS_OS_NAME} = "osx" ]; then
        if [[ ! -d ~/python-interpreters/$PYTHON_VERSION ]]; then
          git clone git://github.com/pyenv/pyenv.git
          cd pyenv/plugins/python-build
          ./install.sh
          cd ../../..
          python-build $PYTHON_VERSION ~/python-interpreters/$PYTHON_VERSION
        fi
        virtualenv --python ~/python-interpreters/$PYTHON_VERSION/bin/python venv
        source venv/bin/activate
      fi
  before_script:
    - |
      if [ ! "$(ls -A .stestr)" ]; then
        rm -rf .stestr
      fi
    # Build and install qiskit-aer package
    - python setup.py bdist_wheel -- -- -j4
    - pip install dist/qiskit_aer*whl
  script:
    - stestr run --slowest

###############################################################################
# Stage-related definitions
###############################################################################

# Define the order of the stages.
stages:
  - lint
  - compile
  - test

# Define the job matrix explicitly, as matrix expansion causes issues when
# using it with stages and some variables/sections cannot be overridden.
jobs:
  include:
    # "lint" stage
    ###########################################################################
    # C++ and Python linters
    # TODO: C++ clang-tidy!
    - stage: lint
      name: Python Style and Linter
      <<: *stage_linux
      before_script: true
      script:
        - pycodestyle --ignore=E402,W504 --max-line-length=100 qiskit/providers/aer
        - pylint -j 2 -rn qiskit/providers/aer

    # "compile" stage
    ###########################################################################
    # Linux Wheel
    - stage: compile
      name: Python Wheel Build Linux
      <<: *stage_linux
      before_script: true
      script:
        - python setup.py bdist_wheel -- -DCMAKE_CXX_COMPILER=g++-7 -- -j4
    # MacOS Wheel
    - stage: compile
      name: Python Wheel Build MacOS
      <<: *stage_osx
      before_script: true
      script:
        - python setup.py bdist_wheel -- -- -j4
    # Linux Standalone
    - stage: compile
      name: Standalone Build Linux
      <<: *stage_linux
      language: cpp
      install: true
      before_script: true
      script:
        - mkdir out; cd out; cmake ..
        - make

    # "test" stage
    ###########################################################################
    # GNU/Linux, Python 3.8
    - stage: test
      name: Python 3.8 Tests Linux
      <<: *stage_linux
      python: 3.8

    # GNU/Linux, Python 3.7
    - stage: test
      name: Python 3.7 Tests Linux
      <<: *stage_linux
      python: 3.7

    # GNU/Linux, Python 3.6
    - stage: test
      if: type = cron
      name: Python 3.6 Tests Linux
      <<: *stage_linux
      python: 3.6

    # GNU/Linux, Python 3.5
    - stage: test
      if: type = cron
      name: Python 3.5 Tests Linux
      <<: *stage_linux
      python: 3.5

    # MacOS, Python 3.8 (via pyenv)
    - stage: test
      if: type = cron
      name: Python 3.8 Tests MacOS
      <<: *stage_osx
      python: 3.8
      env:
        - PYTHON_VERSION=3.8.1

    # MacOS, Python 3.7 (via pyenv)
    - stage: test
      name: Python 3.7 Tests MacOS
      <<: *stage_osx
      python: 3.7
      env:
        - MPLBACKEND=ps
        - PYTHON_VERSION=3.7.2

    # MacOS, Python 3.6 (via pyenv)
    - stage: test
      if: type = cron
      name: Python 3.6 Tests MacOS
      <<: *stage_osx
      python: 3.6
      env:
        - MPLBACKEND=ps
        - PYTHON_VERSION=3.6.5

    # MacOS, Python 3.5 (via pyenv)
    - stage: test
      if: type = cron
      name: Python 3.5 Tests MacOS
      <<: *stage_osx
      python: 3.5
      env:
        - MPLBACKEND=ps
        - PYTHON_VERSION=3.5.6

  # Power tests (currently failing)
  allow_failures:
    # Power Build test
    - stage: compile
      name: Python Wheel Build Linux (Power)
      arch: ppc64le
      <<: *stage_linux
      before_script: true
      script:
        - python setup.py bdist_wheel -- -DCMAKE_CXX_COMPILER=g++-7 -- -j4
    # Linux Standalone
    - stage: compile
      name: Standalone Build Linux (Power)
      arch: ppc64le
      <<: *stage_linux
      install: true
      before_script: true
      script:
        - mkdir out; cd out; cmake ..
        - make
    # Power/Linux, Python 3.7
    - stage: test
      arch: ppc64le
      name: Python 3.7 Tests Linux (Power)
      <<: *stage_linux
      python: 3.7
