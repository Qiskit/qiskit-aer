---
features:
  - |
    The constructor of :class:`~qiskit.providers.aer.noise.QuantumError` now
    accepts several new types of input as ``noise_ops`` argument, for example:

    .. code-block:: python

      # Quantum channels
      kraus = Kraus([
                  np.array([[1, 0], [0, np.sqrt(1 - 0.9)]], dtype=complex),
                  np.array([[0, 0], [0, np.sqrt(0.9)]], dtype=complex)
              ])
      print(QuantumError(kraus))

      # QuantumCircuit
      qc = QuantumCircuit(2)
      qc.h(0)
      qc.cx(0, 1)
      print(QuantumError(qc))

      # Tuple[Instruction, List[int]]  # List[int] = Qubits
      print(QuantumError((Reset(), [0])))

      # Iterable[Tuple[Tuple[Instruction, Qubits], float]]  # float = probability
      print(QuantumError([((IGate(), [0]), 0.9), ((XGate(), [0]), 0.1)]))
      print(QuantumError([((IGate(), [0]), 0.9), ((XGate(), [1]), 0.1)]))

      # Instruction # short cut using default qubits = list(range(inst.num_qubits))
      print(QuantumError([(IGate(), 0.9), (XGate(), 0.1)]))

    Note that the original json-based input are deperecated.
  - |
    Adds a utility function :func:`qiskit.providers.aer.utils.transform_noise_model`
    for constructing a noise model by applying a supplied function to all
    :class:`~qiskit.providers.aer.noise.QuantumError` in the noise model.
  - |
    Adds two utility functions
    :func:`qiskit.providers.aer.utils.transpile_quantum_error` and
    :func:`qiskit.providers.aer.utils.transpile_noise_model` for transpiling
    the circuits contained in :class:`~qiskit.providers.aer.noise.QuantumError`,
    and all errors in a :class:`~qiskit.providers.aer.noise.NoiseModel`.
upgrade:
  - |
    Change default value of ``standard_gates`` to ``None`` for all functions
    in :mod:`~qiskit.providers.aer.noise.errors.standard_errors` as
    those functions are updated so that they use standard gates by default.
  - |
    Change to raise a ``NoiseError`` instead of ``RuntimeError``
    when an unsupported argument is supplied in
    :func:`approximate_quantum_error`.
deprecations:
  - |
    Deprecate ``number_of_qubits`` option of :meth:`QuantumError.__init__`
    in favor of automatic determination of the dimension.
  - |
    Deprecate ``standard_gates`` option of :meth:`QuantumError.__init__`
    in favor of externalizing such an basis-change functionality.
    In many cases, you can transform any error into an error defined
    only with specific gates using :func:`approximate_quantum_error`.
  - |
    Deprecate ``standard_gates`` option of all functions in
    :mod:`~qiskit.providers.aer.noise.errors.standard_errors`
    in favor of returning errors in the form of mixture of standard gates
    as mush as possible by default.
  - |
    Deprecate all functions in :mod:`~qiskit.providers.aer.noise.errors.errorutils`
    because they are helper functions meant to be used only for implementing
    functions in :mod:`~qiskit.providers.aer.noise.errors.standard_errors` and
    they should have been provided as private functions.
  - |
    Deprecate ``standard_gates`` option of :meth:`NoiseModel.from_backend`
    in favor of externalizing such an basis-change functionality.
  - |
    Deprecate :meth:`NoiseModel.from_dict` to make the noise model
    independent of qobj (json) format.
  - |
    Deprecate all public vairables/functions/classes in
    :mod:`~qiskit.providers.aer.noise.utils.noise_transformation` except for
    :func:`approximate_quantum_error` and :func:`approximate_noise_model`
    because they are helper functions meant to be used only for implementing
    ``approximate_*`` functions and they should have been provided as private functions.
  - |
    Deprecate :meth:`~qiskit.providers.aer.noise.utils.noise_remapper.remap_noise_model`
    since the C++ code now automatically truncates and remaps noise models if it truncates circuits.
other:
  - |
    Changes in the implementation of the function :func:`approximate_quantum_error`
    may change the resulting approximate error.
