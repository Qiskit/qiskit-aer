---
prelude: >
    The Qiskit Aer 0.10 release includes several performance and noise model
    improvements. Some highlights are improved performance for parallel shot
    GPU and HPC simulations; support for simulation of circuits
    containing QASM 3.0 control-flow instructions; support for relaxation noise
    on scheduled circuits in backend noise models; support of user created
    transpiler passes for defining custom gate errors and noise models and inserting
    them into circuits.
features:
  - |
    Adds support of QASM 3.0 control-flow instructions introduced in Qiskit-Terra
    0.19.0. Supported instructions are :class:`qiskit.circuit.ForLoopOp`,
    :class:`qiskit.circuit.WhileLoopOp`, :class:`qiskit.circuit.ContinueLoopOp`,
    :class:`qiskit.circuit.BreakLoopOp`, :class:`qiskit.circuit.IfElseOp`.
  - |
    Adds a batched shot simulation optimization for GPU simulations. This
    optional will use available memory on 1 or more GPUs to run multiple
    simulation shots in parallel for greatly improved performance on
    multi-shot simulations with noise models and/or intermediate measurements.

    This option is enabled by default when using ``device="GPU"`` for the
    :class:`~qiskit.providers.aer.AerSimulator` for ``"statevector"`` and
    ``"density_matrix"`` simulation methods and can be disabled by setting the
    ``batched_shots_gpu=False`` in the simulator options.

    This optimization is most benefical for small to medium numbers of qubits
    where there is sufficient GPU memory to run multiple simulations in
    parallel. The maximum number of activate circuit qubits for enabling this
    optimization can be configued using the ``batch_shots_gpu_max_qubits``
    simulator option. The default value of this option is 16.
  - |
    Adds the new option ``max_shot_size`` option to a cutom executor for
    run multiple shots execution of a noisy circuit in parallel. 

    For example configuring ``max_shot_size`` with a custom executor 

    .. code-block:: python

       backend = AerSimulator(
          max_shot_size = 1, max_job_size=1, executor=custom_executor)
       job = backend.run(circuits)

    will split the shots of a noisy circuit into multiple circuits.
    After all individual shot's execution finish running the job results 
    are automatically combined into a single Result object that is 
    returned by ``job.result()``.
  - |
    Added ``mps_swap_direction`` simulator option that allows the user to determine
    the direction of swapping the qubits when internal swaps are inserted for a
    2-qubit gate. Possible values are ``"mps_swap_right"`` and ``"mps_swap_left"``.
    The direction of the swaps may affect performance, depending on the circuit.
  - |
    Implemented new algorithm measurement sampling optimization for the
    ``"matrix_product_state"`` simulation method of the
    :class:`~qiskit.providers.aer.AerSimulator`. Currently this algorithm
    is used only when all qubits are measured and when the simulator
    ``mps_sample_measure_algorithm`` simulator option is set to ``"mps_probabilities"``.
  - |
    Improved the performance of measure instruction for the ``"matrix_product_state"``
    simulation method of the :class:`~qiskit.providers.aer.AerSimulator`.
  - |
    Adds a :class:`~qiskit.providers.aer.library.SaveClifford` instruction for
    saving the state of the stabilizer simulation method as a
    :class:`~qiskit.quantum_info.Clifford` object.

    Note that this instruction is essentially equivalent to the
    :class:`~qiskit.providers.aer.library.SaveStabilizer` instruction, however
    that instruction will return the saved state as a
    :class:`~qiskit.quantum_info.StabilizerState` object instead of a
    :class:`~qiskit.quantum_info.Clifford` object.
upgrade:
  - |
    The return type of several save instructions have been changed to be the
    corresponding `qiskit-terra` classes rather than raw numpy arrays or
    dictionaries. The types that have changed are

    * :func:`~qiskit.providers.aer.libray.save_statvector` now returns as a
      :class:`qiskit.quantum_info.Statevector`
    * :func:`~qiskit.providers.aer.libray.save_density_matrix` now returns as a
      :class:`qiskit.quantum_info.DensityMatrix`
    * :func:`~qiskit.providers.aer.libray.save_stabilizer` now returns as
      :class:`qiskit.quantum_info.StabilizerState`
    * :func:`~qiskit.providers.aer.libray.save_unitary` now returns as
      :class:`qiskit.quantum_info.Operator`
    * :func:`~qiskit.providers.aer.libray.save_superop` now returns as
      :class:`qiskit.quantum_info.SuperOp`
    * :func:`~qiskit.providers.aer.libray.save_probabilities_dict`` now returns as a
      :class:`qiskit.result.ProbDistribution`
deprecations:
  - |
    Using Numpy ``ndarray`` methods and attributes on the return type of
    :func:`~qiskit.providers.aer.libray.save_statvector`,
    :func:`~qiskit.providers.aer.libray.save_density_matrix`,
    :func:`~qiskit.providers.aer.libray.save_unitary`,
    :func:`~qiskit.providers.aer.libray.save_superop`, has been deprecated.
    These instructions now return :mod:`qiskit.quantum_info` classes for their
    return types. Partial backwards compatability with treating these objects as
    numpy arrays is implemented by forwarding methods to the internal numpy arrays
    during the deprecation period.
critical:
  - |
    Add critical notes here, or remove this section.  All of the list items in
    this section are combined when the release notes are rendered, so the text
    needs to be worded so that it does not depend on any information only
    available in another section, such as the prelude. This may mean repeating
    some details.
security:
  - |
    Add security notes here, or remove this section.  All of the list items in
    this section are combined when the release notes are rendered, so the text
    needs to be worded so that it does not depend on any information only
    available in another section, such as the prelude. This may mean repeating
    some details.
fixes:
  - |
    Add normal bug fixes here, or remove this section.  All of the list items
    in this section are combined when the release notes are rendered, so the
    text needs to be worded so that it does not depend on any information only
    available in another section, such as the prelude. This may mean repeating
    some details.
other:
  - |
    Add other notes here, or remove this section.  All of the list items in
    this section are combined when the release notes are rendered, so the text
    needs to be worded so that it does not depend on any information only
    available in another section, such as the prelude. This may mean repeating
    some details.
